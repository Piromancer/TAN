// CLKernelPreprocessor.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <string>
#include <cstring>
#include <fstream>
#include <vector>
#include <sstream>
#include <iostream>
#include <clocale>
#include <cctype>

#define MAX_SIZE_STRING  16384
#define MAX_BLOCK_CHUNK  12000

std::wstring getFileNameWithoutExtension(const std::wstring& filepath)
{
	char sep = '/';
	char dot = '.';
#ifdef _WIN32
	sep = '\\';
#endif
	size_t seppos = filepath.rfind(sep, filepath.length());
	size_t dotpos = filepath.rfind(dot, filepath.length());
	if (dotpos > seppos && (dotpos != std::string::npos))
	{
		return(filepath.substr((seppos + 1), dotpos - seppos - 1));
	}
	if (seppos == std::wstring::npos)
	{
		return(filepath.substr(0, dotpos));
	}
	return filepath;
}

std::string getFileName(const std::string & path)
{
   auto lastSeparatorPosition = path.rfind(
#ifdef _WIN32
	   '\\'
#else
	   '/'
#endif
	   ,
	   path.length()
	   );

   if(std::string::npos != lastSeparatorPosition)
   {
      return path.substr(
		  lastSeparatorPosition + 1,
		  std::string::npos
		  );
   }

   return path;
}

bool compareIgnoreCase(const std::string & first, const std::string & second)
{
	if(first.size() != second.size())
	{
        return false;
	}
    
	for(auto firstChar = first.begin(), secondChar = second.begin(); firstChar != first.end(); ++firstChar, ++secondChar)
	{
		if(std::tolower(*firstChar) != std::tolower(*secondChar))
		{
			return false;
		}
	}

    return true;
}

std::wstring toWideString(const std::string & inputString)
{
	std::mbstate_t state = std::mbstate_t();
	
	const char *input(inputString.c_str());

    std::size_t length = std::mbsrtowcs(nullptr, &input, 0, &state) + 1;
    std::vector<wchar_t> buffer(length);
    std::mbsrtowcs(buffer.data(), &input, buffer.size(), &state);

	return buffer.data();
}

int main(int argc, char* argv[])
{
	if (argc > 3)
	{
		std::cout << "Too many parameters" << std::endl;

		return 1;
	}

	if (argc <= 1)
	{
		std::cout << "Not enough parameters" << std::endl;

		return 1;
	}

	std::string kernelFileFullName = argv[1];
	auto kernelFileExtension = kernelFileFullName.length() > 3
	    ? kernelFileFullName.substr(kernelFileFullName.length() - 3)
		: "";
	
	if(!compareIgnoreCase(kernelFileExtension, ".cl"))
	{
		std::cout << "File is not a .cl file" << std::endl;

		return 1;
	}

	std::wifstream clKernelStream(kernelFileFullName);

	if(clKernelStream.fail())
	{
		std::cout << "Could not open .cl file" << std::endl;

		return 1;
	}

	auto fileName = getFileName(kernelFileFullName);
	fileName.resize(fileName.length() - 3); //skip extension

	std::string outputFileName(
		argc > 2
		    ? argv[2]
			: "CLKernel_" + fileName + ".h"
		);
	std::wofstream outputStream(outputFileName);

	if(outputStream.fail())
	{
		std::cout << "Could not open output file " << outputFileName << std::endl;

		return 1;
	}

	std::cout << "Outputing: " << outputFileName << std::endl;

	std::wstring clKernelSource(
		(std::istreambuf_iterator<wchar_t>(clKernelStream)),
		std::istreambuf_iterator<wchar_t>()
		);

	std::wstring headerdoc =
	    L"#pragma once\n"
		"#include <string>\n"
		"// This file is generated by CLKenelProprocessor, any changes made in this file will be lost\n"
		;
	outputStream << headerdoc << std::endl;

	// Since MS has a maximum size for string literal, we need to check the file size
	size_t incrementChunk = MAX_BLOCK_CHUNK;
	
	size_t partitionCount = 0;
	std::wstring concatenateSource;
	std::wstring fileNameWide = toWideString(fileName);

	for
	(
		size_t blockIndex = 0;
		blockIndex < clKernelSource.length();
		blockIndex += incrementChunk, ++partitionCount
	)
	{
		if((clKernelSource.size() - blockIndex) < MAX_BLOCK_CHUNK)
		{
			incrementChunk = clKernelSource.size() - blockIndex;
		}
		else
		{
			incrementChunk = MAX_BLOCK_CHUNK;
		}

		outputStream
			<< L"const std::string " << fileNameWide << partitionCount
			<< L" = R\"(" << clKernelSource.substr(blockIndex, incrementChunk) << L")\";"
			<< std::endl;

		if(incrementChunk < MAX_BLOCK_CHUNK)
		{
			concatenateSource += fileNameWide + std::to_wstring(partitionCount);
		}
		else
		{
			concatenateSource += fileNameWide + std::to_wstring(partitionCount) + L"+";
		}
	}

	outputStream
	    << "const std::string " << fileNameWide << "_Str = " << concatenateSource << ";" << std::endl
		<< "static const char* " << fileNameWide << " = &" << fileNameWide << "_Str[0u];" << std::endl
		<< "const size_t " << fileNameWide << "Count = " << fileNameWide << "_Str.size();" << std::endl
		;

	outputStream.flush();

	return 0;
}